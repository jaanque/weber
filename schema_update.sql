-- Create the canvas_items table
CREATE TABLE canvas_items (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  project_id BIGINT REFERENCES projects(id) ON DELETE CASCADE NOT NULL,
  user_id UUID REFERENCES auth.users(id) NOT NULL,
  content TEXT,
  left INT NOT NULL,
  top INT NOT NULL,
  width INT NOT NULL,
  height INT NOT NULL,
  style JSONB,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Function to update the updated_at column
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to update the updated_at column on every update
CREATE TRIGGER set_timestamp
BEFORE UPDATE ON canvas_items
FOR EACH ROW
EXECUTE PROCEDURE trigger_set_timestamp();

-- Enable Row Level Security for the canvas_items table
ALTER TABLE canvas_items ENABLE ROW LEVEL SECURITY;

-- Create a policy that allows users to see their own canvas_items
CREATE POLICY "user_can_select_own_canvas_items"
ON canvas_items FOR SELECT
USING (auth.uid() = user_id);

-- Create a policy that allows users to insert their own canvas_items
CREATE POLICY "user_can_insert_own_canvas_items"
ON canvas_items FOR INSERT
WITH CHECK (auth.uid() = user_id);

-- Create a policy that allows users to update their own canvas_items
CREATE POLICY "user_can_update_own_canvas_items"
ON canvas_items FOR UPDATE
USING (auth.uid() = user_id);

-- Create a policy that allows users to delete their own canvas_items
CREATE POLICY "user_can_delete_own_canvas_items"
ON canvas_items FOR DELETE
USING (auth.uid() = user_id);